/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export interface GameScoreInterface extends Interface {
  getFunction(nameOrSignature: 'highScores' | 'submitScore'): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: 'NewHighScore'): EventFragment;

  encodeFunctionData(functionFragment: 'highScores', values: [AddressLike]): string;
  encodeFunctionData(functionFragment: 'submitScore', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'highScores', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submitScore', data: BytesLike): Result;
}

export namespace NewHighScoreEvent {
  export type InputTuple = [player: AddressLike, score: BigNumberish];
  export type OutputTuple = [player: string, score: bigint];
  export interface OutputObject {
    player: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameScore extends BaseContract {
  connect(runner?: ContractRunner | null): GameScore;
  waitForDeployment(): Promise<this>;

  interface: GameScoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  highScores: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;

  submitScore: TypedContractMethod<[_score: BigNumberish], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: 'highScores'
  ): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'submitScore'
  ): TypedContractMethod<[_score: BigNumberish], [void], 'nonpayable'>;

  getEvent(
    key: 'NewHighScore'
  ): TypedContractEvent<
    NewHighScoreEvent.InputTuple,
    NewHighScoreEvent.OutputTuple,
    NewHighScoreEvent.OutputObject
  >;

  filters: {
    'NewHighScore(address,uint256)': TypedContractEvent<
      NewHighScoreEvent.InputTuple,
      NewHighScoreEvent.OutputTuple,
      NewHighScoreEvent.OutputObject
    >;
    NewHighScore: TypedContractEvent<
      NewHighScoreEvent.InputTuple,
      NewHighScoreEvent.OutputTuple,
      NewHighScoreEvent.OutputObject
    >;
  };
}
