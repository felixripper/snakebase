/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  SnakeGameScore,
  SnakeGameScoreInterface,
} from "../SnakeGameScore";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "username",
        type: "string",
      },
    ],
    name: "PlayerRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "score",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "highScore",
        type: "uint256",
      },
    ],
    name: "ScoreSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_player",
        type: "address",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "highScore",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastPlayed",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isRegistered",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_limit",
        type: "uint256",
      },
    ],
    name: "getTopPlayers",
    outputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "usernames",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "scores",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_player",
        type: "address",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "string",
        name: "username",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "highScore",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastPlayed",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_username",
        type: "string",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_score",
        type: "uint256",
      },
    ],
    name: "submitScore",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610fed806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba3c00671161005b578063ba3c0067146100d0578063c3c5a547146100f2578063e2eb41ff14610131578063f2c298be1461014457600080fd5b80634529cae7146100825780635c12cd4b14610098578063aff0b297146100bb575b600080fd5b6001546040519081526020015b60405180910390f35b6100ab6100a6366004610bc8565b610157565b60405161008f9493929190610c3e565b6100ce6100c9366004610c6f565b61026c565b005b6100e36100de366004610c6f565b610380565b60405161008f93929190610cc4565b610121610100366004610bc8565b6001600160a01b031660009081526020819052604090206003015460ff1690565b604051901515815260200161008f565b6100ab61013f366004610bc8565b61093f565b6100ce610152366004610d78565b6109f4565b6060600080600080600080876001600160a01b03166001600160a01b0316815260200190815260200160002060405180608001604052908160008201805461019e90610dea565b80601f01602080910402602001604051908101604052809291908181526020018280546101ca90610dea565b80156102175780601f106101ec57610100808354040283529160200191610217565b820191906000526020600020905b8154815290600101906020018083116101fa57829003601f168201915b50505091835250506001820154602080830191909152600283015460408084019190915260039093015460ff161515606092830152835190840151928401519390910151909991985091965090945092505050565b3360009081526020819052604090206003015460ff166102c45760405162461bcd60e51b815260206004820152600e60248201526d139bdd081c9959da5cdd195c995960921b60448201526064015b60405180910390fd5b6000811161030d5760405162461bcd60e51b815260206004820152601660248201527553636f7265206d75737420626520706f73697469766560501b60448201526064016102bb565b336000908152602081905260409020600181015482111561033057600181018290555b426002820155600181015460405133917fb7f20d0949b6a8bc59d005af4a52f7ff5d0cfcde9056fa556adb0e4b24dcb6d29161037491868252602082015260400190565b60405180910390a25050565b600154606090819081906000818611610399578561039b565b815b9050806000036103f757604080516000808252602082018181528284019093529091906103d8565b60608152602001906001900390816103c35790505b5060408051600081526020810190915291965094509250610938915050565b60008267ffffffffffffffff81111561041257610412610e24565b60405190808252806020026020018201604052801561043b578160200160208202803683370190505b50905060008367ffffffffffffffff81111561045957610459610e24565b604051908082528060200260200182016040528015610482578160200160208202803683370190505b50905060005b8481101561055857600181815481106104a3576104a3610e3a565b9060005260206000200160009054906101000a90046001600160a01b03168382815181106104d3576104d3610e3a565b60200260200101906001600160a01b031690816001600160a01b0316815250506000806001838154811061050957610509610e3a565b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154825183908390811061054557610545610e3a565b6020908102919091010152600101610488565b5060005b848110156106dc576000610571826001610e50565b90505b858110156106d35782828151811061058e5761058e610e3a565b60200260200101518382815181106105a8576105a8610e3a565b602002602001015111156106cb5760008383815181106105ca576105ca610e3a565b602002602001015190508382815181106105e6576105e6610e3a565b602002602001015184848151811061060057610600610e3a565b6020026020010181815250508084838151811061061f5761061f610e3a565b602002602001018181525050600085848151811061063f5761063f610e3a565b6020026020010151905085838151811061065b5761065b610e3a565b602002602001015186858151811061067557610675610e3a565b60200260200101906001600160a01b031690816001600160a01b031681525050808684815181106106a8576106a8610e3a565b60200260200101906001600160a01b031690816001600160a01b03168152505050505b600101610574565b5060010161055c565b508267ffffffffffffffff8111156106f6576106f6610e24565b60405190808252806020026020018201604052801561071f578160200160208202803683370190505b5096508267ffffffffffffffff81111561073b5761073b610e24565b60405190808252806020026020018201604052801561076e57816020015b60608152602001906001900390816107595790505b5095508267ffffffffffffffff81111561078a5761078a610e24565b6040519080825280602002602001820160405280156107b3578160200160208202803683370190505b50945060005b83811015610932578281815181106107d3576107d3610e3a565b60200260200101518882815181106107ed576107ed610e3a565b60200260200101906001600160a01b031690816001600160a01b03168152505060008084838151811061082257610822610e3a565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600001805461085890610dea565b80601f016020809104026020016040519081016040528092919081815260200182805461088490610dea565b80156108d15780601f106108a6576101008083540402835291602001916108d1565b820191906000526020600020905b8154815290600101906020018083116108b457829003601f168201915b50505050508782815181106108e8576108e8610e3a565b602002602001018190525081818151811061090557610905610e3a565b602002602001015186828151811061091f5761091f610e3a565b60209081029190910101526001016107b9565b50505050505b9193909250565b60006020819052908152604090208054819061095a90610dea565b80601f016020809104026020016040519081016040528092919081815260200182805461098690610dea565b80156109d35780601f106109a8576101008083540402835291602001916109d3565b820191906000526020600020905b8154815290600101906020018083116109b657829003601f168201915b50505050600183015460028401546003909401549293909290915060ff1684565b3360009081526020819052604090206003015460ff1615610a4c5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064016102bb565b60038110801590610a5e575060148111155b610aaa5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420757365726e616d65206c656e67746800000000000000000060448201526064016102bb565b604051806080016040528083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093855250505060208083018290524260408085019190915260016060909401939093523382528190522081518190610b1f9082610ec8565b50602082015160018281019190915560408084015160028401556060909301516003909201805460ff191692151592909217909155805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054336001600160a01b0319909116811790915590517fe04d23b73ae3d3b27074da9719b5a4cd521395aaf86bfe7e374933ecb567731a906103749085908590610f88565b600060208284031215610bda57600080fd5b81356001600160a01b0381168114610bf157600080fd5b9392505050565b6000815180845260005b81811015610c1e57602081850181015186830182015201610c02565b506000602082860101526020601f19601f83011685010191505092915050565b608081526000610c516080830187610bf8565b60208301959095525060408101929092521515606090910152919050565b600060208284031215610c8157600080fd5b5035919050565b60008151808452602080850194506020840160005b83811015610cb957815187529582019590820190600101610c9d565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b82811015610d065781516001600160a01b031684529284019290840190600101610ce1565b50505083810382850152855180825282820190600581901b8301840188850160005b83811015610d5657601f19868403018552610d44838351610bf8565b94870194925090860190600101610d28565b50508681036040880152610d6a8189610c88565b9a9950505050505050505050565b60008060208385031215610d8b57600080fd5b823567ffffffffffffffff80821115610da357600080fd5b818501915085601f830112610db757600080fd5b813581811115610dc657600080fd5b866020828501011115610dd857600080fd5b60209290920196919550909350505050565b600181811c90821680610dfe57607f821691505b602082108103610e1e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b80820180821115610e7157634e487b7160e01b600052601160045260246000fd5b92915050565b601f821115610ec3576000816000526020600020601f850160051c81016020861015610ea05750805b601f850160051c820191505b81811015610ebf57828155600101610eac565b5050505b505050565b815167ffffffffffffffff811115610ee257610ee2610e24565b610ef681610ef08454610dea565b84610e77565b602080601f831160018114610f2b5760008415610f135750858301515b600019600386901b1c1916600185901b178555610ebf565b600085815260208120601f198616915b82811015610f5a57888601518255948401946001909101908401610f3b565b5085821015610f785787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220361d34d93077ffe9104b33befae18af605d5894707ec869c4a4fc6ba1c38eda864736f6c63430008180033";

type SnakeGameScoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SnakeGameScoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SnakeGameScore__factory extends ContractFactory {
  constructor(...args: SnakeGameScoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SnakeGameScore & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SnakeGameScore__factory {
    return super.connect(runner) as SnakeGameScore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SnakeGameScoreInterface {
    return new Interface(_abi) as SnakeGameScoreInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SnakeGameScore {
    return new Contract(address, _abi, runner) as unknown as SnakeGameScore;
  }
}
