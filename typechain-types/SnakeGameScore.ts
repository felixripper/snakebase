/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SnakeGameScoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPlayer"
      | "getTopPlayers"
      | "getTotalPlayers"
      | "isRegistered"
      | "players"
      | "register"
      | "submitScore"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PlayerRegistered" | "ScoreSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitScore",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTopPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitScore",
    data: BytesLike
  ): Result;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [player: AddressLike, username: string];
  export type OutputTuple = [player: string, username: string];
  export interface OutputObject {
    player: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreSubmittedEvent {
  export type InputTuple = [
    player: AddressLike,
    score: BigNumberish,
    highScore: BigNumberish
  ];
  export type OutputTuple = [player: string, score: bigint, highScore: bigint];
  export interface OutputObject {
    player: string;
    score: bigint;
    highScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SnakeGameScore extends BaseContract {
  connect(runner?: ContractRunner | null): SnakeGameScore;
  waitForDeployment(): Promise<this>;

  interface: SnakeGameScoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPlayer: TypedContractMethod<
    [_player: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        username: string;
        highScore: bigint;
        lastPlayed: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  getTopPlayers: TypedContractMethod<
    [_limit: BigNumberish],
    [
      [string[], string[], bigint[]] & {
        addresses: string[];
        usernames: string[];
        scores: bigint[];
      }
    ],
    "view"
  >;

  getTotalPlayers: TypedContractMethod<[], [bigint], "view">;

  isRegistered: TypedContractMethod<[_player: AddressLike], [boolean], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        username: string;
        highScore: bigint;
        lastPlayed: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  register: TypedContractMethod<[_username: string], [void], "nonpayable">;

  submitScore: TypedContractMethod<
    [_score: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [_player: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        username: string;
        highScore: bigint;
        lastPlayed: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTopPlayers"
  ): TypedContractMethod<
    [_limit: BigNumberish],
    [
      [string[], string[], bigint[]] & {
        addresses: string[];
        usernames: string[];
        scores: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[_player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        username: string;
        highScore: bigint;
        lastPlayed: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[_username: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitScore"
  ): TypedContractMethod<[_score: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ScoreSubmitted"
  ): TypedContractEvent<
    ScoreSubmittedEvent.InputTuple,
    ScoreSubmittedEvent.OutputTuple,
    ScoreSubmittedEvent.OutputObject
  >;

  filters: {
    "PlayerRegistered(address,string)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;

    "ScoreSubmitted(address,uint256,uint256)": TypedContractEvent<
      ScoreSubmittedEvent.InputTuple,
      ScoreSubmittedEvent.OutputTuple,
      ScoreSubmittedEvent.OutputObject
    >;
    ScoreSubmitted: TypedContractEvent<
      ScoreSubmittedEvent.InputTuple,
      ScoreSubmittedEvent.OutputTuple,
      ScoreSubmittedEvent.OutputObject
    >;
  };
}
