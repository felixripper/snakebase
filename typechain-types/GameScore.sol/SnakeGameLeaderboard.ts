/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SnakeGameLeaderboard {
  export type PlayerStruct = {
    playerAddress: AddressLike;
    username: string;
    highScore: BigNumberish;
    totalGames: BigNumberish;
    totalScore: BigNumberish;
    firstPlayedAt: BigNumberish;
    lastPlayedAt: BigNumberish;
    isRegistered: boolean;
  };

  export type PlayerStructOutput = [
    playerAddress: string,
    username: string,
    highScore: bigint,
    totalGames: bigint,
    totalScore: bigint,
    firstPlayedAt: bigint,
    lastPlayedAt: bigint,
    isRegistered: boolean
  ] & {
    playerAddress: string;
    username: string;
    highScore: bigint;
    totalGames: bigint;
    totalScore: bigint;
    firstPlayedAt: bigint;
    lastPlayedAt: bigint;
    isRegistered: boolean;
  };

  export type LeaderboardEntryStruct = {
    playerAddress: AddressLike;
    username: string;
    score: BigNumberish;
    rank: BigNumberish;
  };

  export type LeaderboardEntryStructOutput = [
    playerAddress: string,
    username: string,
    score: bigint,
    rank: bigint
  ] & { playerAddress: string; username: string; score: bigint; rank: bigint };
}

export interface SnakeGameLeaderboardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPlayer"
      | "getPlayerRank"
      | "getTopPlayers"
      | "getTotalPlayers"
      | "isPlayerRegistered"
      | "isUsernameAvailable"
      | "playerAddresses"
      | "players"
      | "registerPlayer"
      | "submitScore"
      | "updateUsername"
      | "usernameToAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PlayerRegistered"
      | "ScoreSubmitted"
      | "UsernameUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerRank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUsernameAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "playerAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usernameToAddress",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUsernameAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usernameToAddress",
    data: BytesLike
  ): Result;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [
    player: AddressLike,
    username: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    username: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    player: string;
    username: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreSubmittedEvent {
  export type InputTuple = [
    player: AddressLike,
    score: BigNumberish,
    newHighScore: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    score: bigint,
    newHighScore: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    player: string;
    score: bigint;
    newHighScore: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsernameUpdatedEvent {
  export type InputTuple = [
    player: AddressLike,
    oldUsername: string,
    newUsername: string
  ];
  export type OutputTuple = [
    player: string,
    oldUsername: string,
    newUsername: string
  ];
  export interface OutputObject {
    player: string;
    oldUsername: string;
    newUsername: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SnakeGameLeaderboard extends BaseContract {
  connect(runner?: ContractRunner | null): SnakeGameLeaderboard;
  waitForDeployment(): Promise<this>;

  interface: SnakeGameLeaderboardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPlayer: TypedContractMethod<
    [_player: AddressLike],
    [SnakeGameLeaderboard.PlayerStructOutput],
    "view"
  >;

  getPlayerRank: TypedContractMethod<[_player: AddressLike], [bigint], "view">;

  getTopPlayers: TypedContractMethod<
    [_limit: BigNumberish],
    [SnakeGameLeaderboard.LeaderboardEntryStructOutput[]],
    "view"
  >;

  getTotalPlayers: TypedContractMethod<[], [bigint], "view">;

  isPlayerRegistered: TypedContractMethod<
    [_player: AddressLike],
    [boolean],
    "view"
  >;

  isUsernameAvailable: TypedContractMethod<
    [_username: string],
    [boolean],
    "view"
  >;

  playerAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        playerAddress: string;
        username: string;
        highScore: bigint;
        totalGames: bigint;
        totalScore: bigint;
        firstPlayedAt: bigint;
        lastPlayedAt: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  registerPlayer: TypedContractMethod<
    [_username: string],
    [void],
    "nonpayable"
  >;

  submitScore: TypedContractMethod<
    [_score: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateUsername: TypedContractMethod<
    [_newUsername: string],
    [void],
    "nonpayable"
  >;

  usernameToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [_player: AddressLike],
    [SnakeGameLeaderboard.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerRank"
  ): TypedContractMethod<[_player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTopPlayers"
  ): TypedContractMethod<
    [_limit: BigNumberish],
    [SnakeGameLeaderboard.LeaderboardEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isPlayerRegistered"
  ): TypedContractMethod<[_player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUsernameAvailable"
  ): TypedContractMethod<[_username: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "playerAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint, boolean] & {
        playerAddress: string;
        username: string;
        highScore: bigint;
        totalGames: bigint;
        totalScore: bigint;
        firstPlayedAt: bigint;
        lastPlayedAt: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerPlayer"
  ): TypedContractMethod<[_username: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitScore"
  ): TypedContractMethod<[_score: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateUsername"
  ): TypedContractMethod<[_newUsername: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usernameToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;

  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ScoreSubmitted"
  ): TypedContractEvent<
    ScoreSubmittedEvent.InputTuple,
    ScoreSubmittedEvent.OutputTuple,
    ScoreSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "UsernameUpdated"
  ): TypedContractEvent<
    UsernameUpdatedEvent.InputTuple,
    UsernameUpdatedEvent.OutputTuple,
    UsernameUpdatedEvent.OutputObject
  >;

  filters: {
    "PlayerRegistered(address,string,uint256)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;

    "ScoreSubmitted(address,uint256,uint256,uint256)": TypedContractEvent<
      ScoreSubmittedEvent.InputTuple,
      ScoreSubmittedEvent.OutputTuple,
      ScoreSubmittedEvent.OutputObject
    >;
    ScoreSubmitted: TypedContractEvent<
      ScoreSubmittedEvent.InputTuple,
      ScoreSubmittedEvent.OutputTuple,
      ScoreSubmittedEvent.OutputObject
    >;

    "UsernameUpdated(address,string,string)": TypedContractEvent<
      UsernameUpdatedEvent.InputTuple,
      UsernameUpdatedEvent.OutputTuple,
      UsernameUpdatedEvent.OutputObject
    >;
    UsernameUpdated: TypedContractEvent<
      UsernameUpdatedEvent.InputTuple,
      UsernameUpdatedEvent.OutputTuple,
      UsernameUpdatedEvent.OutputObject
    >;
  };
}
